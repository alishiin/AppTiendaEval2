<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/model/ProductRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/model/ProductRepository.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.model&#10;&#10;import com.example.apptiendaeval2.R&#10;&#10;object ProductRepository {&#10;    private val products = listOf(&#10;        // POLERAS&#10;        Producto(&#10;            id = 1,&#10;            nombre = &quot;Polera Negra Forever&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Polera de algodon 100%, comoda. aumentara tu aura&quot;,&#10;            imagenResId = R.drawable.polera_negra,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;MariaUwU&quot;, 5, &quot;Muy buena calidad para mi novio jiji.&quot;),&#10;                Valoracion(&quot;ElJuacoInsano&quot;, 4, &quot;Comoda, llego rapido goood.&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 2,&#10;            nombre = &quot;Polera Azul Los Angeles&quot;,&#10;            precio = 15000,&#10;            descripcion = &quot;Polera de algodon 100% UnderGround.&quot;,&#10;            imagenResId = R.drawable.polera_azul,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Carlillos777&quot;, 4, &quot;Comoda, me quedo de pana mi rey.&quot;),&#10;                Valoracion(&quot;momo&quot;, 4, &quot;muy buena, vaneado pa.&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 3,&#10;            nombre = &quot;Polera Blanca Skyline&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Polera de poliester de RyF Pegado&quot;,&#10;            imagenResId = R.drawable.polera_gris,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Ferguson&quot;,5,&quot;está muy buena, la recomiendo chat&quot;),&#10;                Valoracion(&quot;Hater12&quot;, 2, &quot;El disenio estamu y mal porke estA pegao dislaics&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        // POLERONES&#10;        Producto(&#10;            id = 4,&#10;            nombre = &quot;Poleron Cropped Gris&quot;,&#10;            precio = 25000,&#10;            descripcion = &quot;poleron con capucha cropped Intervalans&quot;,&#10;            imagenResId = R.drawable.poleron_gris,&#10;            categoria = Categoria.POLERONES,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Corazun7.7&quot;,4,&quot;muy buen producto, y la calidad es un 10&quot;),&#10;                Valoracion(&quot;MooaaY&quot;,4,&quot;no me quedó bien amiguis, como lo devuelvo?&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 5,&#10;            nombre = &quot;Polera Azul Marino Suki&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;camiseta de manga corta con cuello redondo y estampado&quot;,&#10;            imagenResId = R.drawable.polera_auto,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Papi Micky&quot;,3, &quot;aceptan canje o no?&quot;),&#10;                Valoracion(&quot;Jh&quot;, 2, &quot;me quedo grande muchachos&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 6,&#10;            nombre = &quot;Polera Gris de Mujer StayWild&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;camiseta de manga corta casual y vintage&quot;,&#10;            imagenResId = R.drawable.polera_mujer,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;RataPeluda&quot;,5, &quot;muy bonitaa&quot;),&#10;                Valoracion(&quot;NamiPlayer&quot;, 4, &quot;me quedo super, la volveria a comprar 100 veces jjij&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 7,&#10;            nombre = &quot;Polera Morada AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de algodon y estampado de dragón&quot;,&#10;            imagenResId = R.drawable.polera_dragon,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;VichoCo66&quot;,6, &quot;tal cual la imagen, me gusto mucho&quot;),&#10;                Valoracion(&quot;Emili&lt;3&quot;, 5, &quot;justo lo que esperaba y la calidad 10/10&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 8,&#10;            nombre = &quot;Polera Gris y Negro&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de hombre con cuello redondo manga corta&quot;,&#10;            imagenResId = R.drawable.polera_negro_gris,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Kakashi69&quot;,4, &quot;muy buena calidad me gustoooo&quot;),&#10;                Valoracion(&quot;Benjita6.5&quot;, 5, &quot;ta entera wena la polera siii&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 9,&#10;            nombre = &quot;Polera Gris y Negro AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de hombre street de manga corta y estampado&quot;,&#10;            imagenResId = R.drawable.polera_negra_estampado,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Manucraft4&quot;,5, &quot;muy linda y comoda&quot;),&#10;                Valoracion(&quot;FerguinZ&quot;, 4, &quot;la pedí en L y me llego tal cual (soy gei)&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 10,&#10;            nombre = &quot;Polera Grunge Punk Phantom&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta con estampado de silueta de hombre&quot;,&#10;            imagenResId = R.drawable.polera_negra_dark,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Alishin&quot;,3, &quot;me encanto el diseño y no juego lol con los panas&quot;),&#10;                Valoracion(&quot;LaParka&quot;, 4, &quot;recomendadaaaa 100%%%%&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        // PANTALONES&#10;        Producto(&#10;            id = 11,&#10;            nombre = &quot;Jeans vaquero Gris&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Jeans rectos de pierna ancha para hombre, estilo vaquero&quot;,&#10;            imagenResId = R.drawable.pantalon_gris,&#10;            categoria = Categoria.PANTALONES,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;MontaCaballos&quot;,3, &quot;muy buena pero la calidad meh&quot;),&#10;                Valoracion(&quot;HogRiders&quot;, 4, &quot;muy buena ropa osi osi&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 12,&#10;            nombre = &quot;Camiseta Casual Gris AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta gris de hombre con diseño de dragon&quot;,&#10;            imagenResId = R.drawable.camista_diseno_dragon,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Ironman&quot;,3, &quot;fresca la tela, me gusto&quot;),&#10;                Valoracion(&quot;Dr.Straño&quot;, 3, &quot;esta buena&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 13,&#10;            nombre = &quot;Pantalon Corto&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Shorts informales con estampado UnderGround&quot;,&#10;            imagenResId = R.drawable.pantalon_corto,&#10;            categoria = Categoria.PANTALONES,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Anndy33&quot;,5, &quot;El diseño es de lo mejor&quot;),&#10;                Valoracion(&quot;Hater2&quot;, 1, &quot;el estampao se me salio despue de lavar el shor&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;&#10;        // POLERAS CON CUADROS&#10;        Producto(&#10;            id = 14,&#10;            nombre = &quot;Polera Cuadros Rojos y Negros&quot;,&#10;            precio = 14990,&#10;            descripcion = &quot;Polera con diseño de cuadros clásico, algodón premium&quot;,&#10;            imagenResId = R.drawable.polera_negra, // temporal hasta tener imagen con cuadros&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;CheckMate99&quot;, 5, &quot;Los cuadros están perfectos, muy buena calidad&quot;),&#10;                Valoracion(&quot;PatternLover&quot;, 4, &quot;Me encanta el diseño, súper cómoda&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 15,&#10;            nombre = &quot;Polera Cuadros Azules y Blancos&quot;,&#10;            precio = 15990,&#10;            descripcion = &quot;Polera estilo preppy con cuadros azules y blancos, corte moderno&quot;,&#10;            imagenResId = R.drawable.polera_azul, // temporal hasta tener imagen con cuadros&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;PrepStyle&quot;, 5, &quot;Perfecta para el look preppy que buscaba&quot;),&#10;                Valoracion(&quot;BlueSquare&quot;, 4, &quot;Los colores son tal como en la foto&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 16,&#10;            nombre = &quot;Polera Cuadros Verdes y Grises&quot;,&#10;            precio = 13990,&#10;            descripcion = &quot;Polera casual con patrón de cuadros verdes y grises, perfecta para el día a día&quot;,&#10;            imagenResId = R.drawable.polera_gris, // temporal hasta tener imagen con cuadros&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;GreenDay&quot;, 4, &quot;Me gusta mucho la combinación de colores&quot;),&#10;                Valoracion(&quot;CasualWear&quot;, 5, &quot;Súper cómoda para usar todos los días&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 17,&#10;            nombre = &quot;Polera Cuadros Blancos y Negros Clásica&quot;,&#10;            precio = 16990,&#10;            descripcion = &quot;Polera con el patrón de cuadros más clásico, perfecta para cualquier ocasión&quot;,&#10;            imagenResId = R.drawable.polera_negro_gris, // temporal hasta tener imagen con cuadros&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;ClassicStyle&quot;, 5, &quot;Un clásico que nunca pasa de moda&quot;),&#10;                Valoracion(&quot;SquarePattern&quot;, 4, &quot;Excelente calidad de tela y diseño&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 18,&#10;            nombre = &quot;Polera Cuadros Pequeños Multicolor&quot;,&#10;            precio = 17990,&#10;            descripcion = &quot;Polera con cuadros pequeños en múltiples colores, estilo vintage moderno&quot;,&#10;            imagenResId = R.drawable.polera_dragon, // temporal hasta tener imagen con cuadros&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;VintageVibes&quot;, 5, &quot;Me encanta el estilo retro con toque moderno&quot;),&#10;                Valoracion(&quot;ColorLover&quot;, 4, &quot;Los colores son vibrantes y alegres&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        )&#10;    )&#10;&#10;    fun getAll() = products&#10;    fun getById(id: Int) = products.find { it.id == id }&#10;    fun getByCategory(categoria: Categoria) = products.filter { it.categoria == categoria }&#10;    fun getCategories() = Categoria.entries.toList()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.model&#10;&#10;import com.example.apptiendaeval2.R&#10;&#10;object ProductRepository {&#10;    private val products = listOf(&#10;        // POLERAS&#10;        Producto(&#10;            id = 1,&#10;            nombre = &quot;Polera Negra Forever&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Polera de algodon 100%, comoda. aumentara tu aura&quot;,&#10;            imagenResId = R.drawable.polera_negra,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_azul, R.drawable.polera_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;MariaUwU&quot;, 5, &quot;Muy buena calidad para mi novio jiji.&quot;),&#10;                Valoracion(&quot;ElJuacoInsano&quot;, 4, &quot;Comoda, llego rapido goood.&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 2,&#10;            nombre = &quot;Polera Azul Los Angeles&quot;,&#10;            precio = 15000,&#10;            descripcion = &quot;Polera de algodon 100% UnderGround.&quot;,&#10;            imagenResId = R.drawable.polera_azul,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_negra, R.drawable.polera_dragon),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Carlillos777&quot;, 4, &quot;Comoda, me quedo de pana mi rey.&quot;),&#10;                Valoracion(&quot;momo&quot;, 4, &quot;muy buena, vaneado pa.&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 3,&#10;            nombre = &quot;Polera Blanca Skyline&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Polera de poliester de RyF Pegado&quot;,&#10;            imagenResId = R.drawable.polera_gris,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_mujer, R.drawable.polera_auto),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Ferguson&quot;,5,&quot;está muy buena, la recomiendo chat&quot;),&#10;                Valoracion(&quot;Hater12&quot;, 2, &quot;El disenio estamu y mal porke estA pegao dislaics&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        // POLERONES&#10;        Producto(&#10;            id = 4,&#10;            nombre = &quot;Poleron Cropped Gris&quot;,&#10;            precio = 25000,&#10;            descripcion = &quot;poleron con capucha cropped Intervalans&quot;,&#10;            imagenResId = R.drawable.poleron_gris,&#10;            categoria = Categoria.POLERONES,&#10;            imagenesResId = listOf(R.drawable.polera_negra, R.drawable.polera_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Corazun7.7&quot;,4,&quot;muy buen producto, y la calidad es un 10&quot;),&#10;                Valoracion(&quot;MooaaY&quot;,4,&quot;no me quedó bien amiguis, como lo devuelvo?&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 5,&#10;            nombre = &quot;Polera Azul Marino Suki&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;camiseta de manga corta con cuello redondo y estampado&quot;,&#10;            imagenResId = R.drawable.polera_auto,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_azul, R.drawable.polera_negro_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Papi Micky&quot;,3, &quot;aceptan canje o no?&quot;),&#10;                Valoracion(&quot;Jh&quot;, 2, &quot;me quedo grande muchachos&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 6,&#10;            nombre = &quot;Polera Gris de Mujer StayWild&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;camiseta de manga corta casual y vintage&quot;,&#10;            imagenResId = R.drawable.polera_mujer,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_mujer, R.drawable.polera_gris, R.drawable.polera_auto),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;RataPeluda&quot;,5, &quot;muy bonitaa&quot;),&#10;                Valoracion(&quot;NamiPlayer&quot;, 4, &quot;me quedo super, la volveria a comprar 100 veces jjij&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 7,&#10;            nombre = &quot;Polera Morada AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de algodon y estampado de dragón&quot;,&#10;            imagenResId = R.drawable.polera_dragon,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_dragon, R.drawable.polera_negra, R.drawable.camista_diseno_dragon),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;VichoCo66&quot;,6, &quot;tal cual la imagen, me gusto mucho&quot;),&#10;                Valoracion(&quot;Emili&lt;3&quot;, 5, &quot;justo lo que esperaba y la calidad 10/10&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 8,&#10;            nombre = &quot;Polera Gris y Negro&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de hombre con cuello redondo manga corta&quot;,&#10;            imagenResId = R.drawable.polera_negro_gris,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_negro_gris, R.drawable.polera_negra, R.drawable.polera_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Kakashi69&quot;,4, &quot;muy buena calidad me gustoooo&quot;),&#10;                Valoracion(&quot;Benjita6.5&quot;, 5, &quot;ta entera wena la polera siii&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 9,&#10;            nombre = &quot;Polera Gris y Negro AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta de hombre street de manga corta y estampado&quot;,&#10;            imagenResId = R.drawable.polera_negra_estampado,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_negra_estampado, R.drawable.polera_dragon, R.drawable.polera_negra_dark),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Manucraft4&quot;,5, &quot;muy linda y comoda&quot;),&#10;                Valoracion(&quot;FerguinZ&quot;, 4, &quot;la pedí en L y me llego tal cual (soy gei)&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 10,&#10;            nombre = &quot;Polera Grunge Punk Phantom&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta con estampado de silueta de hombre&quot;,&#10;            imagenResId = R.drawable.polera_negra_dark,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.polera_negra_dark, R.drawable.polera_negra, R.drawable.polera_negra_estampado),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Alishin&quot;,3, &quot;me encanto el diseño y no juego lol con los panas&quot;),&#10;                Valoracion(&quot;LaParka&quot;, 4, &quot;recomendadaaaa 100%%%%&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        // PANTALONES&#10;        Producto(&#10;            id = 11,&#10;            nombre = &quot;Jeans vaquero Gris&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Jeans rectos de pierna ancha para hombre, estilo vaquero&quot;,&#10;            imagenResId = R.drawable.pantalon_gris,&#10;            categoria = Categoria.PANTALONES,&#10;            imagenesResId = listOf(R.drawable.pantalon_corto, R.drawable.polera_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;MontaCaballos&quot;,3, &quot;muy buena pero la calidad meh&quot;),&#10;                Valoracion(&quot;HogRiders&quot;, 4, &quot;muy buena ropa osi osi&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 12,&#10;            nombre = &quot;Camiseta Casual Gris AsiantiK&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Camiseta gris de hombre con diseño de dragon&quot;,&#10;            imagenResId = R.drawable.camista_diseno_dragon,&#10;            categoria = Categoria.POLERAS,&#10;            imagenesResId = listOf(R.drawable.camista_diseno_dragon, R.drawable.polera_dragon, R.drawable.polera_gris),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Ironman&quot;,3, &quot;fresca la tela, me gusto&quot;),&#10;                Valoracion(&quot;Dr.Straño&quot;, 3, &quot;esta buena&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;        Producto(&#10;            id = 13,&#10;            nombre = &quot;Pantalon Corto&quot;,&#10;            precio = 12990,&#10;            descripcion = &quot;Shorts informales con estampado UnderGround&quot;,&#10;            imagenResId = R.drawable.pantalon_corto,&#10;            categoria = Categoria.PANTALONES,&#10;            imagenesResId = listOf(R.drawable.pantalon_corto, R.drawable.pantalon_gris, R.drawable.polera_auto),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;Anndy33&quot;,5, &quot;El diseño es de lo mejor&quot;),&#10;                Valoracion(&quot;Hater2&quot;, 1, &quot;el estampao se me salio despue de lavar el shor&quot;)&#10;            ),&#10;            tallas = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;)&#10;        ),&#10;&#10;        // CUADROS DECORATIVOS&#10;        Producto(&#10;            id = 14,&#10;            nombre = &quot;Cuadro Abstracto Moderno&quot;,&#10;            precio = 24990,&#10;            descripcion = &quot;Cuadro abstracto con diseños modernos, impreso en lienzo de alta calidad con marco de madera&quot;,&#10;            imagenResId = R.drawable.cuadro1,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro1, R.drawable.cuadro2),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;ArtLover&quot;, 5, &quot;Hermoso cuadro, la calidad del lienzo es excelente&quot;),&#10;                Valoracion(&quot;ModernDecor&quot;, 4, &quot;Perfecto para mi sala, combina con todo&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 15,&#10;            nombre = &quot;Cuadro Paisaje Natural&quot;,&#10;            precio = 27990,&#10;            descripcion = &quot;Hermoso paisaje natural, colores vivos y realistas, ideal para crear ambiente relajante&quot;,&#10;            imagenResId = R.drawable.cuadro2,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro2, R.drawable.cuadro3),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;NatureLover&quot;, 5, &quot;Los colores son increíbles, parece real&quot;),&#10;                Valoracion(&quot;HomeDecor&quot;, 4, &quot;Llegó perfectamente embalado, muy recomendado&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 16,&#10;            nombre = &quot;Cuadro Minimalista&quot;,&#10;            precio = 19990,&#10;            descripcion = &quot;Diseño minimalista elegante, perfecto para espacios modernos y sofisticados&quot;,&#10;            imagenResId = R.drawable.cuadro3,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro3, R.drawable.cuadro4),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;MinimalStyle&quot;, 5, &quot;Exactamente lo que buscaba para mi oficina&quot;),&#10;                Valoracion(&quot;CleanDesign&quot;, 4, &quot;Simple pero elegante, me encanta&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 17,&#10;            nombre = &quot;Cuadro Floral Vintage&quot;,&#10;            precio = 22990,&#10;            descripcion = &quot;Hermosas flores con estilo vintage, detalles delicados pintados con técnica profesional&quot;,&#10;            imagenResId = R.drawable.cuadro4,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro4, R.drawable.cuadro5),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;VintageVibes&quot;, 5, &quot;Precioso, le da un toque especial a mi dormitorio&quot;),&#10;                Valoracion(&quot;FlowerPower&quot;, 4, &quot;Los detalles florales son hermosos&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 18,&#10;            nombre = &quot;Cuadro Geométrico Colorido&quot;,&#10;            precio = 25990,&#10;            descripcion = &quot;Formas geométricas vibrantes, diseño contemporáneo que aporta energía a cualquier espacio&quot;,&#10;            imagenResId = R.drawable.cuadro5,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro5, R.drawable.cuadro6),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;GeometryFan&quot;, 5, &quot;Los colores son súper vibrantes, me encanta&quot;),&#10;                Valoracion(&quot;ModernArt&quot;, 4, &quot;Perfecto para mi sala de estar moderna&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 19,&#10;            nombre = &quot;Cuadro Urbano Industrial&quot;,&#10;            precio = 26990,&#10;            descripcion = &quot;Motivos urbanos con texturas industriales, perfecto para lofts y espacios contemporáneos&quot;,&#10;            imagenResId = R.drawable.cuadro6,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro6, R.drawable.cuadro7),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;UrbanStyle&quot;, 5, &quot;Queda perfecto en mi loft, muy industrial&quot;),&#10;                Valoracion(&quot;CityVibes&quot;, 4, &quot;La textura se ve muy real, excelente calidad&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        ),&#10;        Producto(&#10;            id = 20,&#10;            nombre = &quot;Cuadro Retro Vintage&quot;,&#10;            precio = 21990,&#10;            descripcion = &quot;Estética retro con tonos cálidos, evoca nostalgia y calidez en tu hogar&quot;,&#10;            imagenResId = R.drawable.cuadro7,&#10;            categoria = Categoria.CUADROS,&#10;            imagenesResId = listOf(R.drawable.cuadro7, R.drawable.cuadro1),&#10;            valoraciones = listOf(&#10;                Valoracion(&quot;RetroLover&quot;, 5, &quot;Me transporta a otra época, hermoso&quot;),&#10;                Valoracion(&quot;WarmTones&quot;, 4, &quot;Los tonos cálidos crean un ambiente acogedor&quot;)&#10;            ),&#10;            medidas = listOf(&quot;30cmx30cm&quot;, &quot;30cmx45cm&quot;, &quot;45cmx60cm&quot;, &quot;70cmx55cm&quot;)&#10;        )&#10;    )&#10;&#10;    fun getAll() = products&#10;    fun getById(id: Int) = products.find { it.id == id }&#10;    fun getByCategory(categoria: Categoria) = products.filter { it.categoria == categoria }&#10;    fun getCategories() = Categoria.entries.toList()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/model/Producto.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/model/Producto.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.model&#10;&#10;data class Producto(&#10;    val id: Int,&#10;    val nombre: String,&#10;    val precio: Int,&#10;    val descripcion: String,&#10;    val imagenResId: Int,&#10;    val categoria: Categoria,&#10;    val imagenesResId: List&lt;Int&gt; = emptyList(),&#10;    val valoraciones: List&lt;Valoracion&gt; = emptyList(),&#10;    val tallas: List&lt;String&gt; = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;),&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.model&#10;&#10;data class Producto(&#10;    val id: Int,&#10;    val nombre: String,&#10;    val precio: Int,&#10;    val descripcion: String,&#10;    val imagenResId: Int,&#10;    val categoria: Categoria,&#10;    val imagenesResId: List&lt;Int&gt; = emptyList(),&#10;    val valoraciones: List&lt;Valoracion&gt; = emptyList(),&#10;    val tallas: List&lt;String&gt; = listOf(&quot;S&quot;,&quot;M&quot;,&quot;L&quot;,&quot;XL&quot;),&#10;    val medidas: List&lt;String&gt; = emptyList() // Para cuadros: medidas en cm&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.example.apptiendaeval2.ui.theme&#10;&#10;import androidx.compose.material.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;val Typography = Typography(&#10;    body1 = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp&#10;    ),&#10;    h1 = TextStyle(&#10;        fontFamily = FontFamily.Cursive,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 24.sp&#10;    ),&#10;    h2 = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.SemiBold,&#10;        fontSize = 20.sp&#10;    ),&#10;    button = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp&#10;    )&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaeval2.ui.theme&#10;&#10;import androidx.compose.material.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import com.example.apptiendaeval2.R&#10;&#10;val DevilNetFontFamily = FontFamily(&#10;    Font(R.font.the_devil_net, FontWeight.Normal)&#10;)&#10;&#10;val FuturaBoldFontFamily = FontFamily(&#10;    Font(R.font.futura_bold, FontWeight.Bold)&#10;)&#10;&#10;val Typography = Typography(&#10;    body1 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 16.sp&#10;    ),&#10;    body2 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 14.sp&#10;    ),&#10;    h1 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 24.sp&#10;    ),&#10;    h2 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 20.sp&#10;    ),&#10;    h3 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 18.sp&#10;    ),&#10;    h4 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 16.sp&#10;    ),&#10;    h5 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 14.sp&#10;    ),&#10;    h6 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 12.sp&#10;    ),&#10;    subtitle1 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 16.sp&#10;    ),&#10;    subtitle2 = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 14.sp&#10;    ),&#10;    button = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 14.sp&#10;    ),&#10;    caption = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 12.sp&#10;    ),&#10;    overline = TextStyle(&#10;        fontFamily = FuturaBoldFontFamily,&#10;        fontWeight = FontWeight.Bold,&#10;        fontSize = 10.sp&#10;    )&#10;)&#10;&#10;// Estilo personalizado para el título de CrimeWave&#10;val CrimeWaveTitle = TextStyle(&#10;    fontFamily = DevilNetFontFamily,&#10;    fontWeight = FontWeight.Normal,&#10;    fontSize = 18.sp&#10;)&#10;&#10;// Estilos adicionales con Futura Bold para elementos destacados&#10;val FuturaButtonStyle = TextStyle(&#10;    fontFamily = FuturaBoldFontFamily,&#10;    fontWeight = FontWeight.Bold,&#10;    fontSize = 16.sp&#10;)&#10;&#10;val FuturaProductTitle = TextStyle(&#10;    fontFamily = FuturaBoldFontFamily,&#10;    fontWeight = FontWeight.Bold,&#10;    fontSize = 18.sp&#10;)&#10;&#10;val FuturaPrice = TextStyle(&#10;    fontFamily = FuturaBoldFontFamily,&#10;    fontWeight = FontWeight.Bold,&#10;    fontSize = 16.sp&#10;)&#10;&#10;val FuturaCategoryButton = TextStyle(&#10;    fontFamily = FuturaBoldFontFamily,&#10;    fontWeight = FontWeight.Bold,&#10;    fontSize = 14.sp&#10;)&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/CartScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/CartScreen.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;import com.example.apptiendaval2.viewmodel.CartItem&#10;&#10;@Composable&#10;fun CartScreen(navController: NavController, cartViewModel: CartViewModel = viewModel()) {&#10;    val cartItems by cartViewModel.items.collectAsState()&#10;    val total = cartItems.sumOf { it.producto.precio * it.cantidad }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = com.example.apptiendaeval2.R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            if (cartItems.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&quot;Tu carrito está vacío&quot;, style = MaterialTheme.typography.h6, color = Color.Black)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                            colors = ButtonDefaults.buttonColors(backgroundColor = Color.Black, contentColor = Color.White),&#10;                            shape = MaterialTheme.shapes.medium&#10;                        ) {&#10;                            Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;, tint = Color.White)&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Volver a la tienda&quot;, color = Color.White)&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.weight(1f)) {&#10;                    items(cartItems.size) { index -&gt;&#10;                        val item = cartItems[index]&#10;                        CartItemRow(item, onQuantityChange = { newQty -&gt;&#10;                            cartViewModel.updateQuantity(item.producto.id, newQty)&#10;                        })&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Text(&#10;                    &quot;Total: \$${total}&quot;,&#10;                    style = MaterialTheme.typography.h5,&#10;                    color = Color.Black,&#10;                    modifier = Modifier.align(Alignment.End)&#10;                )&#10;&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    OutlinedButton(&#10;                        onClick = { cartViewModel.clear() },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) {&#10;                        Text(&quot;Vaciar&quot;, color = Color.Black)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            val totalItems = cartItems.sumOf { it.cantidad }&#10;                            if (totalItems &gt; 15) {&#10;                                navController.navigate(&quot;error&quot;)&#10;                            } else {&#10;                                if (total &gt; 0) {&#10;                                    navController.navigate(&quot;checkout&quot;)&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(backgroundColor = Color.Black, contentColor = Color.White)&#10;                    ) {&#10;                        Text(&quot;Finalizar compra&quot;)&#10;                    }&#10;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CartItemRow(item: CartItem, onQuantityChange: (Int) -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        elevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(8.dp)&#10;                .fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = item.producto.imagenResId),&#10;                contentDescription = item.producto.nombre,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier.size(70.dp)&#10;            )&#10;&#10;            Spacer(Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(item.producto.nombre, style = MaterialTheme.typography.h6, color = Color.Black)&#10;                Text(&quot;Precio: \$${item.producto.precio}&quot;, color = Color.Black)&#10;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    OutlinedButton(&#10;                        onClick = { if (item.cantidad &gt; 1) onQuantityChange(item.cantidad - 1) },&#10;                        contentPadding = PaddingValues(horizontal = 8.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) { Text(&quot;-&quot;, color = Color.Black) }&#10;&#10;                    Text(text = item.cantidad.toString(), modifier = Modifier.padding(horizontal = 8.dp), color = Color.Black)&#10;&#10;                    OutlinedButton(&#10;                        onClick = { onQuantityChange(item.cantidad + 1) },&#10;                        contentPadding = PaddingValues(horizontal = 8.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) { Text(&quot;+&quot;, color = Color.Black) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;import com.example.apptiendaval2.viewmodel.CartItem&#10;import com.example.apptiendaeval2.ui.theme.FuturaProductTitle&#10;import com.example.apptiendaeval2.ui.theme.FuturaPrice&#10;import com.example.apptiendaeval2.ui.theme.FuturaButtonStyle&#10;&#10;@Composable&#10;fun CartScreen(navController: NavController, cartViewModel: CartViewModel = viewModel()) {&#10;    val cartItems by cartViewModel.items.collectAsState()&#10;    val total = cartItems.sumOf { it.producto.precio * it.cantidad }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = com.example.apptiendaeval2.R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            if (cartItems.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&quot;TU CARRITO ESTÁ VACÍO&quot;, style = MaterialTheme.typography.h5, color = Color.Black)&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                            colors = ButtonDefaults.buttonColors(backgroundColor = Color.Black, contentColor = Color.White),&#10;                            shape = MaterialTheme.shapes.medium&#10;                        ) {&#10;                            Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;, tint = Color.White)&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;VOLVER A LA TIENDA&quot;, style = FuturaButtonStyle, color = Color.White)&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.weight(1f)) {&#10;                    items(cartItems.size) { index -&gt;&#10;                        val item = cartItems[index]&#10;                        CartItemRow(item, onQuantityChange = { newQty -&gt;&#10;                            cartViewModel.updateQuantity(item.producto.id, newQty)&#10;                        })&#10;                    }&#10;                }&#10;&#10;                Spacer(Modifier.height(12.dp))&#10;&#10;                Text(&#10;                    &quot;TOTAL: \$${total}&quot;,&#10;                    style = FuturaPrice,&#10;                    color = Color(0xFF006400),&#10;                    modifier = Modifier.align(Alignment.End)&#10;                )&#10;&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                    OutlinedButton(&#10;                        onClick = { cartViewModel.clear() },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) {&#10;                        Text(&quot;VACIAR&quot;, style = MaterialTheme.typography.button, color = Color.Black)&#10;                    }&#10;                    Button(&#10;                        onClick = {&#10;                            val totalItems = cartItems.sumOf { it.cantidad }&#10;                            if (totalItems &gt; 15) {&#10;                                navController.navigate(&quot;error&quot;)&#10;                            } else {&#10;                                if (total &gt; 0) {&#10;                                    navController.navigate(&quot;checkout&quot;)&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f),&#10;                        colors = ButtonDefaults.buttonColors(backgroundColor = Color.Black, contentColor = Color.White)&#10;                    ) {&#10;                        Text(&quot;FINALIZAR COMPRA&quot;, style = FuturaButtonStyle)&#10;                    }&#10;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CartItemRow(item: CartItem, onQuantityChange: (Int) -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        elevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(8.dp)&#10;                .fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Image(&#10;                painter = painterResource(id = item.producto.imagenResId),&#10;                contentDescription = item.producto.nombre,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier.size(70.dp)&#10;            )&#10;&#10;            Spacer(Modifier.width(8.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(item.producto.nombre.uppercase(), style = FuturaProductTitle, color = Color.Black)&#10;                Text(&quot;PRECIO: \$${item.producto.precio}&quot;, style = FuturaPrice, color = Color(0xFF006400))&#10;&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    OutlinedButton(&#10;                        onClick = { if (item.cantidad &gt; 1) onQuantityChange(item.cantidad - 1) },&#10;                        contentPadding = PaddingValues(horizontal = 8.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) { Text(&quot;-&quot;, style = MaterialTheme.typography.button, color = Color.Black) }&#10;&#10;                    Text(text = item.cantidad.toString(), style = MaterialTheme.typography.h6, modifier = Modifier.padding(horizontal = 8.dp), color = Color.Black)&#10;&#10;                    OutlinedButton(&#10;                        onClick = { onQuantityChange(item.cantidad + 1) },&#10;                        contentPadding = PaddingValues(horizontal = 8.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)&#10;                    ) { Text(&quot;+&quot;, style = MaterialTheme.typography.button, color = Color.Black) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/CatalogScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/CatalogScreen.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.ProductRepository&#10;import com.example.apptiendaval2.model.Categoria&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;import com.example.apptiendaeval2.R&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;@Composable&#10;fun CatalogScreen(navController: NavController, cartViewModel: CartViewModel) {&#10;    var selectedCategory by remember { mutableStateOf&lt;Categoria?&gt;(null) }&#10;&#10;    val productos = if (selectedCategory == null) {&#10;        ProductRepository.getAll()&#10;    } else {&#10;        ProductRepository.getByCategory(selectedCategory!!)&#10;    }&#10;&#10;    val categorias = ProductRepository.getCategories()&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Fondo igual al Login&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        // Capa semi-transparente&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;&#10;        // Contenido del catálogo&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp)&#10;        ) {&#10;            // Título&#10;            Text(&#10;                text = &quot;Catálogo de Productos&quot;,&#10;                style = MaterialTheme.typography.h5.copy(fontWeight = FontWeight.Bold),&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Menú de categorías&#10;            LazyRow(&#10;                modifier = Modifier.padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Botón &quot;Todos&quot;&#10;                item {&#10;                    Button(&#10;                        onClick = { selectedCategory = null },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            backgroundColor = if (selectedCategory == null) Color.Black else Color.Gray&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Todos&quot;,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Botones de categorías&#10;                items(categorias.size) { index -&gt;&#10;                    val categoria = categorias[index]&#10;                    Button(&#10;                        onClick = { selectedCategory = categoria },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            backgroundColor = if (selectedCategory == categoria) Color.Black else Color.Gray&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = categoria.displayName,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Lista de productos filtrados&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productos.size) { i -&gt;&#10;                    val p = productos[i]&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { navController.navigate(&quot;productDetails/${p.id}&quot;) },&#10;                        elevation = 4.dp&#10;                    ) {&#10;                        Row(modifier = Modifier.padding(12.dp)) {&#10;                            Image(&#10;                                painter = painterResource(p.imagenResId),&#10;                                contentDescription = p.nombre,&#10;                                modifier = Modifier.size(80.dp)&#10;                            )&#10;                            Spacer(Modifier.width(12.dp))&#10;                            Column(modifier = Modifier.fillMaxWidth()) {&#10;                                Text(&#10;                                    text = p.nombre,&#10;                                    style = MaterialTheme.typography.h6&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Categoría: ${p.categoria.displayName}&quot;,&#10;                                    style = MaterialTheme.typography.caption,&#10;                                    color = Color.Gray&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Precio: $${p.precio}&quot;,&#10;                                    style = MaterialTheme.typography.body1,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = p.descripcion,&#10;                                    style = MaterialTheme.typography.body2,&#10;                                    maxLines = 2&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.ProductRepository&#10;import com.example.apptiendaval2.model.Categoria&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;import com.example.apptiendaeval2.R&#10;import androidx.compose.ui.layout.ContentScale&#10;import com.example.apptiendaeval2.ui.theme.FuturaProductTitle&#10;import com.example.apptiendaeval2.ui.theme.FuturaCategoryButton&#10;&#10;@Composable&#10;fun CatalogScreen(navController: NavController, cartViewModel: CartViewModel) {&#10;    var selectedCategory by remember { mutableStateOf&lt;Categoria?&gt;(null) }&#10;&#10;    val productos = if (selectedCategory == null) {&#10;        ProductRepository.getAll()&#10;    } else {&#10;        ProductRepository.getByCategory(selectedCategory!!)&#10;    }&#10;&#10;    val categorias = ProductRepository.getCategories()&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Fondo igual al Login&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        // Capa semi-transparente&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;&#10;        // Contenido del catálogo&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp)&#10;        ) {&#10;            // Título&#10;            Text(&#10;                text = &quot;CATÁLOGO DE PRODUCTOS&quot;,&#10;                style = MaterialTheme.typography.h4,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Menú de categorías&#10;            LazyRow(&#10;                modifier = Modifier.padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Botón &quot;Todos&quot;&#10;                item {&#10;                    Button(&#10;                        onClick = { selectedCategory = null },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            backgroundColor = if (selectedCategory == null) Color.Black else Color.Gray&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;TODOS&quot;,&#10;                            color = Color.White,&#10;                            style = FuturaCategoryButton&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Botones de categorías&#10;                items(categorias.size) { index -&gt;&#10;                    val categoria = categorias[index]&#10;                    Button(&#10;                        onClick = { selectedCategory = categoria },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            backgroundColor = if (selectedCategory == categoria) Color.Black else Color.Gray&#10;                        )&#10;                    ) {&#10;                        Text(&#10;                            text = categoria.displayName.uppercase(),&#10;                            color = Color.White,&#10;                            style = FuturaCategoryButton&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Lista de productos filtrados&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productos.size) { i -&gt;&#10;                    val p = productos[i]&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { navController.navigate(&quot;productDetails/${p.id}&quot;) },&#10;                        elevation = 4.dp&#10;                    ) {&#10;                        Row(modifier = Modifier.padding(12.dp)) {&#10;                            Image(&#10;                                painter = painterResource(p.imagenResId),&#10;                                contentDescription = p.nombre,&#10;                                modifier = Modifier.size(80.dp)&#10;                            )&#10;                            Spacer(Modifier.width(12.dp))&#10;                            Column(modifier = Modifier.fillMaxWidth()) {&#10;                                Text(&#10;                                    text = p.nombre.uppercase(),&#10;                                    style = FuturaProductTitle&#10;                                )&#10;                                Text(&#10;                                    text = &quot;CATEGORÍA: ${p.categoria.displayName.uppercase()}&quot;,&#10;                                    style = MaterialTheme.typography.caption,&#10;                                    color = Color.Gray&#10;                                )&#10;                                Text(&#10;                                    text = p.descripcion.uppercase(),&#10;                                    style = MaterialTheme.typography.body2,&#10;                                    maxLines = 2&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.graphics.Color&#10;import com.example.apptiendaeval2.R&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val productos = listOf(&#10;        Pair(&quot;GuilirRecs&quot;, R.drawable.polera_negra),&#10;        Pair(&quot;Vegetta777&quot;, R.drawable.polera_azul),&#10;        Pair(&quot;FarganxX&quot;, R.drawable.poleron_gris)&#10;    )&#10;&#10;    val productosNombres = listOf(&#10;        &quot;Polera Negra Forever&quot;,&#10;        &quot;Polera Azul Los Angeles&quot;,&#10;        &quot;Poleron Cropped Gris&quot;&#10;    )&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.3f))&#10;        )&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Top bar simulada&#10;            TopAppBar(&#10;                title = { Text(&quot;Bienvenido a CrimeWave&quot;) },&#10;                backgroundColor = Color.Black,&#10;                contentColor = Color.White&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    backgroundColor = Color.Black,&#10;                    contentColor = Color.White&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Text(&quot;Ir a comprar&quot;)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                &quot;Productos Más Valorados&quot;,&#10;                style = MaterialTheme.typography.h5,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(start = 16.dp, bottom = 8.dp)&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxHeight(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(productos.size) { index -&gt;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        elevation = 6.dp&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .background(Color.White)&#10;                                .padding(12.dp)&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Image(&#10;                                    painter = painterResource(id = productos[index].second),&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier&#10;                                        .size(50.dp)&#10;                                        .padding(end = 8.dp)&#10;                                )&#10;                                Text(&#10;                                    productos[index].first,&#10;                                    style = MaterialTheme.typography.subtitle1,&#10;                                    color = Color.Black&#10;                                )&#10;                            }&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                productosNombres[index],&#10;                                style = MaterialTheme.typography.body1,&#10;                                color = Color.Black&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Image(&#10;                                painter = painterResource(id = productos[index].second),&#10;                                contentDescription = productosNombres[index],&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(180.dp),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.compose.ui.graphics.Color&#10;import com.example.apptiendaeval2.R&#10;import com.example.apptiendaeval2.ui.theme.CrimeWaveTitle&#10;import com.example.apptiendaeval2.ui.theme.FuturaButtonStyle&#10;&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val productos = listOf(&#10;        Pair(&quot;GuilirRecs&quot;, R.drawable.polera_negra),&#10;        Pair(&quot;Vegetta777&quot;, R.drawable.polera_azul),&#10;        Pair(&quot;FarganxX&quot;, R.drawable.poleron_gris)&#10;    )&#10;&#10;    val productosNombres = listOf(&#10;        &quot;Polera Negra Forever&quot;,&#10;        &quot;Polera Azul Los Angeles&quot;,&#10;        &quot;Poleron Cropped Gris&quot;&#10;    )&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.3f))&#10;        )&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Top bar simulada&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;CrimeWave&quot;,&#10;                        style = CrimeWaveTitle&#10;                    )&#10;                },&#10;                backgroundColor = Color.Black,&#10;                contentColor = Color.White&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    backgroundColor = Color.Black,&#10;                    contentColor = Color.White&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;IR A COMPRAR&quot;,&#10;                    style = FuturaButtonStyle&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                &quot;PRODUCTOS MÁS VALORADOS&quot;,&#10;                style = MaterialTheme.typography.h5,&#10;                color = Color.Black,&#10;                modifier = Modifier.padding(start = 16.dp, bottom = 8.dp)&#10;            )&#10;&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxHeight(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(productos.size) { index -&gt;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        elevation = 6.dp&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .background(Color.White)&#10;                                .padding(12.dp)&#10;                        ) {&#10;                            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                                Image(&#10;                                    painter = painterResource(id = productos[index].second),&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier&#10;                                        .size(50.dp)&#10;                                        .padding(end = 8.dp)&#10;                                )&#10;                                Text(&#10;                                    productos[index].first,&#10;                                    style = MaterialTheme.typography.subtitle1,&#10;                                    color = Color.Black&#10;                                )&#10;                            }&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                productosNombres[index],&#10;                                style = MaterialTheme.typography.body1,&#10;                                color = Color.Black&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Image(&#10;                                painter = painterResource(id = productos[index].second),&#10;                                contentDescription = productosNombres[index],&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(180.dp),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/LoginScreen.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.UserRepository&#10;import com.example.apptiendaeval2.R&#10;&#10;@Composable&#10;fun LoginScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var errorMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.6f))&#10;                    .padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;Inicio de Sesión&quot;,&#10;                    style = MaterialTheme.typography.h5,&#10;                    color = Color.Black&#10;                )&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                val blackFieldColors = TextFieldDefaults.textFieldColors(&#10;                    backgroundColor = Color.White.copy(alpha = 0.5f),&#10;                    focusedIndicatorColor = Color.Black,&#10;                    unfocusedIndicatorColor = Color.Black,&#10;                    cursorColor = Color.Black,&#10;                    textColor = Color.Black,&#10;                    focusedLabelColor = Color.Black,&#10;                    unfocusedLabelColor = Color.Black&#10;                )&#10;&#10;                TextField(&#10;                    value = email,&#10;                    onValueChange = { email = it },&#10;                    label = { Text(&quot;Email&quot;) },&#10;                    colors = blackFieldColors&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                TextField(&#10;                    value = password,&#10;                    onValueChange = { password = it },&#10;                    label = { Text(&quot;Contraseña&quot;) },&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    colors = blackFieldColors&#10;                )&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                if (errorMessage.isNotEmpty()) {&#10;                    Text(errorMessage, color = Color.Red)&#10;                    Spacer(Modifier.height(8.dp))&#10;                }&#10;&#10;                Button(&#10;                    onClick = {&#10;                        errorMessage = &quot;&quot;&#10;                        when {&#10;                            email.isBlank() || password.isBlank() -&gt;&#10;                                errorMessage = &quot;Todos los campos son obligatorios&quot;&#10;                            email == &quot;admin@tienda.cl&quot; &amp;&amp; password == &quot;admin123&quot; -&gt;&#10;                                navController.navigate(&quot;backoffice&quot;)&#10;                            UserRepository.validateUser(email, password) -&gt;&#10;                                navController.navigate(&quot;home&quot;)&#10;                            else -&gt; errorMessage = &quot;Email o contraseña incorrectos&quot;&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    ),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Ingresar&quot;)&#10;                }&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                TextButton(onClick = { navController.navigate(&quot;register&quot;) }) {&#10;                    Text(&quot;¿No tienes cuenta? Regístrate&quot;, color = Color.Black)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.UserRepository&#10;import com.example.apptiendaeval2.R&#10;import com.example.apptiendaeval2.ui.theme.FuturaButtonStyle&#10;&#10;@Composable&#10;fun LoginScreen(navController: NavController) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var errorMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.fondo_godines),&#10;            contentDescription = null,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.White.copy(alpha = 0.35f))&#10;        )&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp)&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier&#10;                    .background(Color.White.copy(alpha = 0.6f))&#10;                    .padding(24.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;INICIO DE SESIÓN&quot;,&#10;                    style = MaterialTheme.typography.h4,&#10;                    color = Color.Black&#10;                )&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                val blackFieldColors = TextFieldDefaults.textFieldColors(&#10;                    backgroundColor = Color.White.copy(alpha = 0.5f),&#10;                    focusedIndicatorColor = Color.Black,&#10;                    unfocusedIndicatorColor = Color.Black,&#10;                    cursorColor = Color.Black,&#10;                    textColor = Color.Black,&#10;                    focusedLabelColor = Color.Black,&#10;                    unfocusedLabelColor = Color.Black&#10;                )&#10;&#10;                TextField(&#10;                    value = email,&#10;                    onValueChange = { email = it },&#10;                    label = { Text(&quot;Email&quot;) },&#10;                    colors = blackFieldColors&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                TextField(&#10;                    value = password,&#10;                    onValueChange = { password = it },&#10;                    label = { Text(&quot;Contraseña&quot;) },&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    colors = blackFieldColors&#10;                )&#10;                Spacer(Modifier.height(16.dp))&#10;&#10;                if (errorMessage.isNotEmpty()) {&#10;                    Text(errorMessage, color = Color.Red)&#10;                    Spacer(Modifier.height(8.dp))&#10;                }&#10;&#10;                Button(&#10;                    onClick = {&#10;                        errorMessage = &quot;&quot;&#10;                        when {&#10;                            email.isBlank() || password.isBlank() -&gt;&#10;                                errorMessage = &quot;Todos los campos son obligatorios&quot;&#10;                            email == &quot;admin@tienda.cl&quot; &amp;&amp; password == &quot;admin123&quot; -&gt;&#10;                                navController.navigate(&quot;backoffice&quot;)&#10;                            UserRepository.validateUser(email, password) -&gt;&#10;                                navController.navigate(&quot;home&quot;)&#10;                            else -&gt; errorMessage = &quot;Email o contraseña incorrectos&quot;&#10;                        }&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    ),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&#10;                        text = &quot;INGRESAR&quot;,&#10;                        style = FuturaButtonStyle&#10;                    )&#10;                }&#10;&#10;                Spacer(Modifier.height(8.dp))&#10;&#10;                TextButton(onClick = { navController.navigate(&quot;register&quot;) }) {&#10;                    Text(&#10;                        text = &quot;¿NO TIENES CUENTA? REGÍSTRATE&quot;,&#10;                        color = Color.Black,&#10;                        style = MaterialTheme.typography.button&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/ProductDetailsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/apptiendaeval2/view/ProductDetailsScreen.kt" />
              <option name="originalContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.ProductRepository&#10;import com.example.apptiendaval2.model.Valoracion&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;&#10;@Composable&#10;fun ProductDetailsScreen(&#10;    navController: NavController,&#10;    productId: Int,&#10;    cartViewModel: CartViewModel&#10;) {&#10;    val producto = remember(productId) { ProductRepository.getById(productId) }&#10;&#10;    if (producto == null) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize(),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&quot;Producto no encontrado&quot;, color = Color.Black)&#10;            Spacer(Modifier.height(8.dp))&#10;            Button(&#10;                onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    backgroundColor = Color.Black,&#10;                    contentColor = Color.White&#10;                )&#10;            ) {&#10;                Text(&quot;Volver al catálogo&quot;)&#10;            }&#10;        }&#10;        return&#10;    }&#10;&#10;    var selectedImage by remember { mutableStateOf(producto.imagenResId) }&#10;    var selectedTalla by remember { mutableStateOf(producto.tallas.firstOrNull() ?: &quot;S&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(producto.nombre, style = MaterialTheme.typography.h6, color = Color.White) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Atrás&quot;, tint = Color.White)&#10;                    }&#10;                },&#10;                backgroundColor = Color.Black,&#10;                contentColor = Color.White&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(16.dp)&#10;                .fillMaxSize()&#10;        ) {&#10;            Card(&#10;                shape = RoundedCornerShape(8.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp),&#10;                elevation = 4.dp&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(selectedImage),&#10;                    contentDescription = producto.nombre,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            LazyRow(modifier = Modifier.fillMaxWidth()) {&#10;                items(producto.imagenesResId.size + 1) { index -&gt;&#10;                    val imgRes =&#10;                        if (index == 0) producto.imagenResId else producto.imagenesResId.getOrNull(index - 1)&#10;                    if (imgRes != null) {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .padding(4.dp)&#10;                                .clickable { selectedImage = imgRes },&#10;                            shape = RoundedCornerShape(6.dp),&#10;                            elevation = 2.dp&#10;                        ) {&#10;                            Image(&#10;                                painter = painterResource(imgRes),&#10;                                contentDescription = null,&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(producto.nombre, style = MaterialTheme.typography.h6, color = Color.Black)&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&quot;Precio: \$${producto.precio}&quot;, style = MaterialTheme.typography.subtitle1, color = Color.Black)&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(&quot;Descripción&quot;, style = MaterialTheme.typography.subtitle1, color = Color.Black)&#10;            Text(producto.descripcion, modifier = Modifier.padding(top = 6.dp), color = Color.Black)&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(&quot;Tallas disponibles&quot;, style = MaterialTheme.typography.subtitle1, color = Color.Black)&#10;            LazyRow(modifier = Modifier.padding(vertical = 8.dp)) {&#10;                items(producto.tallas.size) { index -&gt;&#10;                    val talla = producto.tallas[index]&#10;                    OutlinedButton(&#10;                        onClick = { selectedTalla = talla },&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = if (selectedTalla == talla) Color.White else Color.Black,&#10;                            backgroundColor = if (selectedTalla == talla) Color.Black else Color.Transparent&#10;                        ),&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    ) {&#10;                        Text(talla)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(&quot;Valoraciones&quot;, style = MaterialTheme.typography.subtitle1, color = Color.Black)&#10;            if (producto.valoraciones.isEmpty()) {&#10;                Text(&quot;Aún no hay valoraciones.&quot;, color = Color.Black)&#10;            } else {&#10;                producto.valoraciones.forEach { v -&gt; RatingRow(v) }&#10;            }&#10;&#10;            Spacer(Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Button(&#10;                    modifier = Modifier.weight(1f),&#10;                    onClick = { cartViewModel.addProduct(producto) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    )&#10;                ) {&#10;                    Text(&quot;Agregar al carrito&quot;)&#10;                }&#10;&#10;                Button(&#10;                    modifier = Modifier.weight(1f),&#10;                    onClick = { navController.navigate(&quot;cart&quot;) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    )&#10;                ) {&#10;                    Text(&quot;Ir al carrito&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RatingRow(v: Valoracion) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        shape = RoundedCornerShape(6.dp),&#10;        elevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(v.usuario, style = MaterialTheme.typography.subtitle2, color = Color.Black)&#10;                Text(v.comentario, style = MaterialTheme.typography.body2, color = Color.Black)&#10;            }&#10;            Text(&quot;${v.estrellas} ⭐&quot;, modifier = Modifier.padding(start = 8.dp), color = Color.Black)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.apptiendaval2.view&#10;&#10;import androidx.compose.foundation.Image&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.apptiendaval2.model.ProductRepository&#10;import com.example.apptiendaval2.model.Valoracion&#10;import com.example.apptiendaval2.viewmodel.CartViewModel&#10;import com.example.apptiendaeval2.ui.theme.FuturaProductTitle&#10;import com.example.apptiendaeval2.ui.theme.FuturaPrice&#10;import com.example.apptiendaeval2.ui.theme.FuturaButtonStyle&#10;&#10;@Composable&#10;fun ProductDetailsScreen(&#10;    navController: NavController,&#10;    productId: Int,&#10;    cartViewModel: CartViewModel&#10;) {&#10;    val producto = remember(productId) { ProductRepository.getById(productId) }&#10;&#10;    if (producto == null) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize(),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&quot;Producto no encontrado&quot;, color = Color.Black)&#10;            Spacer(Modifier.height(8.dp))&#10;            Button(&#10;                onClick = { navController.navigate(&quot;catalog&quot;) },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    backgroundColor = Color.Black,&#10;                    contentColor = Color.White&#10;                )&#10;            ) {&#10;                Text(&quot;VOLVER AL CATÁLOGO&quot;, style = FuturaButtonStyle)&#10;            }&#10;        }&#10;        return&#10;    }&#10;&#10;    var selectedImage by remember { mutableStateOf(producto.imagenResId) }&#10;    var selectedTalla by remember { &#10;        mutableStateOf(&#10;            if (producto.medidas.isNotEmpty()) producto.medidas.firstOrNull() ?: &quot;30cmx30cm&quot;&#10;            else producto.tallas.firstOrNull() ?: &quot;S&quot;&#10;        ) &#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(producto.nombre.uppercase(), style = FuturaProductTitle, color = Color.White) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Atrás&quot;, tint = Color.White)&#10;                    }&#10;                },&#10;                backgroundColor = Color.Black,&#10;                contentColor = Color.White&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(16.dp)&#10;                .fillMaxSize()&#10;        ) {&#10;            Card(&#10;                shape = RoundedCornerShape(8.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp),&#10;                elevation = 4.dp&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(selectedImage),&#10;                    contentDescription = producto.nombre,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            LazyRow(modifier = Modifier.fillMaxWidth()) {&#10;                items(producto.imagenesResId.size + 1) { index -&gt;&#10;                    val imgRes =&#10;                        if (index == 0) producto.imagenResId else producto.imagenesResId.getOrNull(index - 1)&#10;                    if (imgRes != null) {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .padding(4.dp)&#10;                                .clickable { selectedImage = imgRes },&#10;                            shape = RoundedCornerShape(6.dp),&#10;                            elevation = 2.dp&#10;                        ) {&#10;                            Image(&#10;                                painter = painterResource(imgRes),&#10;                                contentDescription = null,&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(producto.nombre.uppercase(), style = FuturaProductTitle, color = Color.Black)&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&quot;PRECIO: \$${producto.precio}&quot;, style = FuturaPrice, color = Color(0xFF006400))&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(&quot;DESCRIPCIÓN&quot;, style = MaterialTheme.typography.h5, color = Color.Black)&#10;            Text(producto.descripcion.uppercase(), style = MaterialTheme.typography.body1, modifier = Modifier.padding(top = 6.dp), color = Color.Black)&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            // Mostrar tallas o medidas según la categoría&#10;            if (producto.medidas.isNotEmpty()) {&#10;                Text(&quot;MEDIDAS DISPONIBLES&quot;, style = MaterialTheme.typography.h5, color = Color.Black)&#10;                LazyRow(modifier = Modifier.padding(vertical = 8.dp)) {&#10;                    items(producto.medidas.size) { index -&gt;&#10;                        val medida = producto.medidas[index]&#10;                        OutlinedButton(&#10;                            onClick = { selectedTalla = medida },&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = if (selectedTalla == medida) Color.White else Color.Black,&#10;                                backgroundColor = if (selectedTalla == medida) Color.Black else Color.Transparent&#10;                            ),&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        ) {&#10;                            Text(medida, style = MaterialTheme.typography.button)&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                Text(&quot;TALLAS DISPONIBLES&quot;, style = MaterialTheme.typography.h5, color = Color.Black)&#10;                LazyRow(modifier = Modifier.padding(vertical = 8.dp)) {&#10;                    items(producto.tallas.size) { index -&gt;&#10;                        val talla = producto.tallas[index]&#10;                        OutlinedButton(&#10;                            onClick = { selectedTalla = talla },&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = if (selectedTalla == talla) Color.White else Color.Black,&#10;                                backgroundColor = if (selectedTalla == talla) Color.Black else Color.Transparent&#10;                            ),&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        ) {&#10;                            Text(talla, style = MaterialTheme.typography.button)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(Modifier.height(12.dp))&#10;&#10;            Text(&quot;VALORACIONES&quot;, style = MaterialTheme.typography.h5, color = Color.Black)&#10;            if (producto.valoraciones.isEmpty()) {&#10;                Text(&quot;AÚN NO HAY VALORACIONES.&quot;, style = MaterialTheme.typography.body1, color = Color.Black)&#10;            } else {&#10;                producto.valoraciones.forEach { v -&gt; RatingRow(v) }&#10;            }&#10;&#10;            Spacer(Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Button(&#10;                    modifier = Modifier.weight(1f),&#10;                    onClick = { cartViewModel.addProduct(producto) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    )&#10;                ) {&#10;                    Text(&quot;AGREGAR AL CARRITO&quot;, style = FuturaButtonStyle)&#10;                }&#10;&#10;                Button(&#10;                    modifier = Modifier.weight(1f),&#10;                    onClick = { navController.navigate(&quot;cart&quot;) },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        backgroundColor = Color.Black,&#10;                        contentColor = Color.White&#10;                    )&#10;                ) {&#10;                    Text(&quot;IR AL CARRITO&quot;, style = FuturaButtonStyle)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RatingRow(v: Valoracion) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        shape = RoundedCornerShape(6.dp),&#10;        elevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(v.usuario, style = MaterialTheme.typography.subtitle2, color = Color.Black)&#10;                Text(v.comentario, style = MaterialTheme.typography.body2, color = Color.Black)&#10;            }&#10;            Text(&quot;${v.estrellas} ⭐&quot;, modifier = Modifier.padding(start = 8.dp), color = Color.Black)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>